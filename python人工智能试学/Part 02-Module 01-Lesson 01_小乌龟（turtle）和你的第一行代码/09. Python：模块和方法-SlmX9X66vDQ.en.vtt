WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.194
As you might imagine, a lot goes into designing
正如你想象的 很多人在设计

00:00:03.194 --> 00:00:07.040
a robot even if it's a virtual robot rather than a real one.
机器人即使是虚拟机器人而不是真正的机器人

00:00:07.040 --> 00:00:11.080
To make it possible for us to use turtle robots in Python,
为了让我们可以在 Python中使用海龟机器人

00:00:11.080 --> 00:00:14.705
somebody had to write a bunch of code about turtles,
总得有人写一些关于海龟的代码

00:00:14.705 --> 00:00:16.339
and here it is.
就在这里

00:00:16.339 --> 00:00:19.425
This code makes it possible for us to create
这个代码让我们创造了

00:00:19.425 --> 00:00:24.269
a turtle object and use simple instructions to have it draw things on the screen.
一个海龟对象 用简单的指令把它画在屏幕上 

00:00:24.269 --> 00:00:27.140
Now, that's a lot of code.
这就是很多代码

00:00:27.140 --> 00:00:31.214
This is actually something you'll see a lot of in programming.
这其实是你在编程中看到的很多东西 

00:00:31.214 --> 00:00:35.509
Someone will write some useful code in a file and then share that file
某人将在文件中写入一些有用的代码 然后共享该文件

00:00:35.509 --> 00:00:40.019
so everyone can use it and not have to write that same code over again themselves.
所以每个人都可以用它不用再写同样的代码

00:00:40.020 --> 00:00:44.895
In Python, these collections of useful code are called modules.
在 Python 中 这些有用代码的集合称为模块 

00:00:44.895 --> 00:00:48.555
In this case, we've made use of the turtle module.
在这种情况下 我们利用了海龟模块 

00:00:48.554 --> 00:00:51.740
There are all kinds of other useful modules out there as well,
还有其他有用的模块

00:00:51.740 --> 00:00:53.390
such as the math module,
比如数学模块 

00:00:53.390 --> 00:00:56.645
which has a bunch of code to help you do useful calculations.
它有一堆代码来帮助您进行有用的计算 

00:00:56.645 --> 00:01:00.109
You know, there are a lot of modules out there,
你知道那边有很多模块

00:01:00.109 --> 00:01:04.939
and if we put all of those files of code into every program we write,
如果我们把所有这些文件都写进我们写的每一个节目

00:01:04.939 --> 00:01:07.579
it would slow those programs down a lot.
会让那些节目变慢很多

00:01:07.579 --> 00:01:10.370
So instead we tell Python when there's
所以我们要告诉 Python

00:01:10.370 --> 00:01:13.310
a specific module that we want to use in our program.
我们计划中使用的特定模块 

00:01:13.310 --> 00:01:16.125
We do that by importing the module.
我们通过导入模块来完成此工作 

00:01:16.125 --> 00:01:19.939
That's what this first line of code import turtle is all about.
这就是第一行的密码输入性海龟

00:01:19.939 --> 00:01:23.709
That's how we tell Python that we want to do things with turtles in
这就是我们如何告诉 Python 我们想用海龟做的事情

00:01:23.709 --> 00:01:29.144
this program and we will therefore need access to the code that's in the turtle module.
因此 我们需要使用龟模块中的代码 

00:01:29.144 --> 00:01:31.744
Once we've imported the turtle module,
一旦我们输入了海龟模块

00:01:31.745 --> 00:01:33.579
it's as if all the code we're a part of
就像我们所做的

00:01:33.579 --> 00:01:37.405
our own program and we can access it to do things with turtles.
我们自己的节目 可以用海龟做事情 

00:01:37.405 --> 00:01:44.435
For example, let's take another look at this line, Amy equals turtle.Turtle.
例如 让我们再看看这一行  Amy 等于 turtle.Turtle  

00:01:44.435 --> 00:01:47.710
Remember, turtle.Turtle is the code that
记住龟龟

00:01:47.709 --> 00:01:50.964
creates a new turtle object in the computer's memory.
在计算机内存中创建新的海龟对象 

00:01:50.965 --> 00:01:54.745
Notice how it starts with the name of the module that we need to use,
请注意 它以我们需要使用的模块的名称开始 

00:01:54.745 --> 00:01:57.490
turtle, and then there's a dot.
乌龟然后有个点

00:01:57.489 --> 00:02:00.379
This dot is telling Python to look inside
这个点在告诉 Python

00:02:00.379 --> 00:02:05.170
the turtle module for some code that is called turtle and run that code.
一个被称为海龟的代码的龟模块运行代码

00:02:05.170 --> 00:02:10.444
So it saying run the turtle code that is inside the turtle module,
所以说运行乌龟模块里的乌龟代码

00:02:10.444 --> 00:02:13.939
and it's that code that creates the new turtle object.
这就是创造新的海龟对象的代码

00:02:13.939 --> 00:02:16.759
Now once the turtle object has been created,
一旦海龟被创造了

00:02:16.759 --> 00:02:22.699
we can give that turtle instructions such as amy.forward100 or amy.right90.
我们可以给出 amy.forward100 或者 amy.right90之类的海龟指令 

00:02:22.699 --> 00:02:26.284
An important thing to understand about these lines is that they're
了解这些线的一个重要的事情是

00:02:26.284 --> 00:02:30.384
actually referencing code that is hidden away somewhere else.
实际上引用隐藏在别处的代码

00:02:30.384 --> 00:02:35.894
Specifically, these lines are referring to code that is inside that turtle module.
具体来说 这些线指的是龟模块内部的代码 

00:02:35.895 --> 00:02:38.480
In that module, there's a block of code that
在那个模块里有一个代码块

00:02:38.479 --> 00:02:41.239
has instructions for getting the turtle to go forward,
有让乌龟前进的指示

00:02:41.240 --> 00:02:45.405
and there's another block of code that has the instructions for getting it to turn right.
还有另一个代码块有指令让它右转

00:02:45.405 --> 00:02:49.879
So, we have these blocks of code that have instructions for making the turtle
所以 我们有这些代码块 有让乌龟的指令

00:02:49.879 --> 00:02:54.639
do different things but these blocks of code don't do anything by themselves,
做不同的事情但这些代码本身就不做任何事情

00:02:54.639 --> 00:02:57.284
they just sit there waiting to be used.
他们就坐在那里等着被使用

00:02:57.284 --> 00:03:01.384
When we run a line of code like amy.forward100,
当我们运行 amy.forward100这样的代码时

00:03:01.384 --> 00:03:04.579
we are telling Python to find this block of code
我们告诉 Python 找到这个代码块

00:03:04.580 --> 00:03:07.790
that has the name forward and run that code.
它具有该名称并运行该代码 

00:03:07.789 --> 00:03:13.810
In Python, these blocks of code are referred to as methods and we would refer to
在 Python 中 这些代码块称为方法 我们将引用

00:03:13.810 --> 00:03:20.375
lines like amy.forward100 and amy.right90 as method calls.
amy.forward100 和 amy.right90 之类的行作为方法调用 

00:03:20.375 --> 00:03:21.814
When we run these lines,
当我们运行这些线路时

00:03:21.814 --> 00:03:26.340
we are calling the forward and write methods that are in the turtle module.
我们正在调用海龟模块中的正向和写入方法 

00:03:26.340 --> 00:03:31.150
Amy.coloryellow is another example of a method call and it
Amy.color黄色是方法调用的另一个示例

00:03:31.150 --> 00:03:36.025
is of course calling the block of code named color that is inside the turtle module.
当然是指乌龟模块内部的代号颜色的方块

00:03:36.025 --> 00:03:40.390
Notice that these method calls always have the name of the method followed by
请注意 这些方法调用始终具有方法的名称 后跟

00:03:40.389 --> 00:03:43.209
parentheses and we can put some input inside
我们可以在里面输入一些输入

00:03:43.210 --> 00:03:46.730
the parentheses that Python will use when it runs the method.
Python 将在运行方法时使用的括号 

00:03:46.729 --> 00:03:48.859
So when we call the forward method,
所以当我们称之为前向方法时

00:03:48.860 --> 00:03:52.600
it needs to know how much we want the turtle to move forward.
它需要知道我们希望乌龟前进的程度

00:03:52.599 --> 00:03:57.739
So, here we're using the number 100 to tell it the number of pixels to move forward.
所以 这里我们用 100 号来告诉它要向前移动的像素数 

00:03:57.740 --> 00:03:59.515
When we call the write method,
当我们调用写作方法时

00:03:59.514 --> 00:04:03.504
it needs input so that it knows how many degrees the turtle should turn.
它需要输入 让它知道乌龟应该转动多少度 

00:04:03.504 --> 00:04:05.539
And when we call the color method,
当我们用颜色的方法

00:04:05.539 --> 00:04:07.949
it needs input like yellow or blue.
需要输入黄色或蓝色 

00:04:07.949 --> 00:04:10.964
If methods seem a little mysterious at this point,
如果这方面的方法有点神秘的话

00:04:10.965 --> 00:04:14.450
don't worry, we'll come back to this concept again later on.
别担心我们稍后再回到这个概念

00:04:14.449 --> 00:04:17.164
For now, it's enough to understand that we've got
现在已经足够理解了

00:04:17.165 --> 00:04:20.090
a block of code that's hidden away somewhere else,
隐藏在别处的密码

00:04:20.089 --> 00:04:23.419
that this code has a name and now we can run it by using lines
这个代码有个名字现在我们可以用线

00:04:23.420 --> 00:04:28.520
like amy.forward100 or amy.right90.
如 amy.forward100 或 amy.right90 
