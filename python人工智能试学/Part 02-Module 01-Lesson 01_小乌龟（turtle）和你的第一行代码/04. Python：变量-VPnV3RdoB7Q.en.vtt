WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.799
Here's the code we were just looking at.
这是我们刚刚看到的代码

00:00:02.799 --> 00:00:04.500
If you played with this,
如果你玩这个

00:00:04.500 --> 00:00:08.730
you should have found that when you change the turtle's name in only one line of code,
你应该发现当你改变海龟名字的时候

00:00:08.730 --> 00:00:10.384
the program won't work.
程序就不起作用了

00:00:10.384 --> 00:00:13.285
When you try to run it, you just get an error message.
当您尝试运行它时 只会收到一条错误消息 

00:00:13.285 --> 00:00:16.085
But if you change the name in all of these lines,
但如果你更改了所有这些行的名称

00:00:16.085 --> 00:00:17.435
it works just fine.
那就行了

00:00:17.434 --> 00:00:20.549
We can better understand why that's happening if we look more
我们能更好地理解为什么会发生这种情况

00:00:20.550 --> 00:00:25.410
closely at this line: george equals turtle.Turtle.
就在这条线上 : george 等于 turtle.Turtle 

00:00:25.410 --> 00:00:28.695
On a general level, we can think of this line as
在一个普通的层面上 我们可以认为这条线

00:00:28.695 --> 00:00:32.159
creating a turtle and giving that turtle a name.
创造一只乌龟给乌龟取名

00:00:32.159 --> 00:00:35.804
This part on the right, turtle.Turtle parentheses,
这部分是右边的海龟

00:00:35.804 --> 00:00:39.390
is the part that creates a new turtle and this part on the left,
是创造一个新的乌龟的部分

00:00:39.390 --> 00:00:42.310
George, says what the turtle's name will be.
乔治说乌龟的名字会是什么

00:00:42.310 --> 00:00:46.300
But what do we mean when we say this code is creating a turtle?
但是当我们说这个代码是在创造乌龟的时候 我们的意思是什么 ?

00:00:46.299 --> 00:00:50.869
Well, Python has a bunch of information about how a turtle works,
Python 有很多关于海龟如何运作的信息

00:00:50.869 --> 00:00:53.000
how to get this virtual robot to move
如何让虚拟机器人移动

00:00:53.000 --> 00:00:55.795
around in different ways and draw things on the screen.
用不同的方式在屏幕上画东西

00:00:55.795 --> 00:00:59.240
In order to be able to use a turtle in our program,
为了能在我们的节目中使用乌龟

00:00:59.240 --> 00:01:02.770
we first need to make a copy of some of this data in the computer's memory.
我们首先需要在计算机的内存中复制其中一些数据 

00:01:02.770 --> 00:01:06.125
So, when we run this code, turtle.Turtle,
所以当我们运行这个代码 turtle.Turtle

00:01:06.125 --> 00:01:08.269
Python finds some free space in
Python 找到了一些可用空间

00:01:08.269 --> 00:01:12.655
the computer's memory and it puts this turtle data into that space.
电脑的记忆就会把这个海龟数据放进那个空间里

00:01:12.655 --> 00:01:15.320
Basically, we're getting things ready so that we can use
基本上我们准备好了

00:01:15.319 --> 00:01:18.299
this data whenever we need to have the turtle draw something.
只要我们需要有乌龟就能画出来

00:01:18.299 --> 00:01:21.230
So, we now have the data we need for
我们现在有了我们需要的数据

00:01:21.230 --> 00:01:25.425
the virtual turtle robot in this specific location in the computer's memory.
在计算机内存中的这个特定位置的虚拟海龟机器人 

00:01:25.424 --> 00:01:27.950
By the way, you'll hear us refer to this as
顺便说下你会听到我们说

00:01:27.950 --> 00:01:32.000
a turtle data object or simply a turtle object.
乌龟数据对象或简单海龟对象 

00:01:32.000 --> 00:01:35.454
If we want to be able to use this turtle object,
如果我们想用这个乌龟物体

00:01:35.454 --> 00:01:37.484
we can't just put the data in memory,
我们不能把数据放在记忆里

00:01:37.484 --> 00:01:40.650
we also need to have some way of talking about that turtle,
我们也要有办法说那只乌龟

00:01:40.650 --> 00:01:43.000
giving it instructions and so on.
给它指示等等

00:01:43.000 --> 00:01:45.950
We need some way of referring to that turtle.
我们需要某种方式提到那只乌龟

00:01:45.950 --> 00:01:48.469
That's why we give it a name, like George.
这就是为什么我们给它一个名字像乔治

00:01:48.469 --> 00:01:53.329
Once the turtle data object has been placed in memory and given a name,
一旦海龟数据对象被放入记忆中并给出一个名字 

00:01:53.329 --> 00:01:57.000
we can use that name whenever we want to do something with the turtle.
只要我们想和乌龟做什么就可以用这个名字

00:01:57.000 --> 00:02:01.569
For example, if we want the turtle named George to go forward or turn,
例如 如果我们想让叫乔治的乌龟前进或转弯 

00:02:01.569 --> 00:02:08.144
we can use lines like george.forward100 and george.right90.
我们可以使用 george.forward100 和 george.right90之类的线路 

00:02:08.145 --> 00:02:12.770
If we first say that we are referring to this data object as George but then
如果我们先说 我们指的是 George  然后是 George

00:02:12.770 --> 00:02:17.420
later try to refer to it with a different name like Amy, it's not going to work.
然后试着用像 Amy 这样的不同的名字来称呼它 它是不会起作用的 

00:02:17.419 --> 00:02:22.174
Our code hasn't connected Amy with any particular data in memory.
我们的代码没有将 Amy 与内存中的任何特定数据连接起来 

00:02:22.175 --> 00:02:24.770
We can use pretty much whatever name we want,
我们可以用我们想要的名字

00:02:24.770 --> 00:02:30.530
but we have to be consistent or Python won't know what data we're referring to.
但我们必须一致或 Python 不知道我们指的是什么数据

00:02:30.530 --> 00:02:35.313
Now, this concept isn't just something that applies to naming turtles.
现在 这个概念不只是适用于命名海龟的东西 

00:02:35.313 --> 00:02:38.359
The general idea here is that we put some data into
一般的想法是我们把一些数据放进去

00:02:38.360 --> 00:02:40.525
the computer's memory and then we connect
电脑的记忆然后我们就会

00:02:40.525 --> 00:02:43.490
that data to a name that we can use in our code.
我们的代码中可以使用的数据

00:02:43.490 --> 00:02:48.399
When we have a connection between a name and the code and some data in memory,
当我们有一个名字和代码之间的连接以及内存中的一些数据时

00:02:48.399 --> 00:02:50.500
there's a specific term we use for this,
我们有一个特定的术语

00:02:50.500 --> 00:02:52.110
it's called a variable.
它叫做变量

00:02:52.110 --> 00:02:56.580
The reason we call it a variable is because this connection is able to vary,
我们之所以称它为变量 是因为这个连接能够改变 

00:02:56.580 --> 00:02:59.800
that is, we can change what data of variable refers to.
就是我们可以改变变量的数据是指什么 

00:02:59.800 --> 00:03:04.150
We can say this variable refers to some data in one place in memory,
我们可以说这个变量是指内存中一个地方的一些数据 

00:03:04.150 --> 00:03:06.849
but then later in our program we could change it so the variable
但后来在我们的计划中我们可以改变它

00:03:06.849 --> 00:03:10.125
refers to some other data in a different location in memory.
指的是内存中不同位置的其他一些数据 

00:03:10.125 --> 00:03:14.219
A variable is kind of a box with a label on it.
一个变量是一个带有标签的盒子 

00:03:14.219 --> 00:03:17.889
We can use the label to refer to whatever is in that box,
我们可以用标签来指那个盒子里的任何东西

00:03:17.889 --> 00:03:22.099
but we could later take the label off and stick it onto a different box instead.
但我们可以把标签取下来把它贴在另一个盒子上

00:03:22.099 --> 00:03:27.079
To tell the computer that a particular data object should have a particular name tag,
要告诉计算机 特定数据对象应该具有特定名称标记 

00:03:27.080 --> 00:03:31.070
we use lines like george equals turtle.Turtle.
我们用像地质公园一样的线

00:03:31.069 --> 00:03:35.824
Notice how this line splits into two parts around the equal sign.
请注意 此线条如何在等号周围分割为两个部分 

00:03:35.824 --> 00:03:38.609
On the right is the code turtle.Turtle,
右边是代号龟龟

00:03:38.610 --> 00:03:40.380
which creates a new turtle.
造就了一只新的乌龟

00:03:40.379 --> 00:03:45.125
On the left is George which is the name that we are giving to the variable.
左边是 George  这是我们给变量的名字 

00:03:45.125 --> 00:03:48.655
In the middle is the equal sign which tells Python,
中间是告诉 Python的等号

00:03:48.655 --> 00:03:52.900
take this thing on the right and connect it with the name on the left.
把这个东西放在右边把它和左边的名字连接起来

00:03:52.900 --> 00:03:56.789
By the way, when we connect a name with some data in memory,
顺便说下 当我们用记忆中的一些数据连接一个名字时 

00:03:56.789 --> 00:03:59.609
we refer to this process as assignment.
我们把这个过程称为赋值 

00:03:59.610 --> 00:04:03.960
We are assigning the data from the code on the right and the name on the left.
我们正在从右边的代码和左侧的名称中分配数据 

00:04:03.960 --> 00:04:09.314
The equal sign is called an assignment operator and we can refer to a line of code,
等号称为赋值运算符 我们可以引用一行代码 

00:04:09.314 --> 00:04:11.789
like george equals turtle.Turtle,
就像地质公园一样龟龟

00:04:11.789 --> 00:04:13.859
as an assignment statement.
作为赋值语句 

00:04:13.860 --> 00:04:18.250
Notice that the stuff on the right of an assignment statement always happens first.
请注意 赋值语句右边的内容总是首先发生的 

00:04:18.250 --> 00:04:24.279
First, we create a new turtle and then we assign that turtle to the name George.
首先 我们创造一个新的乌龟 然后把乌龟分配给乔治 
